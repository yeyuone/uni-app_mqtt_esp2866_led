<template>
	<view style="padding: 0 30rpx 0;"> 
		<uni-collapse>
			<uni-collapse-item title="连接配置" :open="true"  accordion>
				<uni-forms  border>
					<uni-forms-item label="HOST">
						<uni-easyinput type=password :inputBorder="false" v-model="serve.host" placeholder="请输入host"></uni-easyinput>
					</uni-forms-item>
					<uni-forms-item label="PORT">
						<uni-easyinput :inputBorder="false" v-model="serve.wsport" placeholder="请输入port"></uni-easyinput>
					</uni-forms-item>
					<uni-forms-item label="账号">
						<uni-easyinput :inputBorder="false" v-model="options.username" placeholder="请输入账号"></uni-easyinput>
					</uni-forms-item>
					<uni-forms-item label="密码">
						<uni-easyinput type=password :inputBorder="false" v-model="options.password" placeholder="请输入密码"></uni-easyinput>
					</uni-forms-item>
					<uni-forms-item label="clientId">
						<uni-easyinput :inputBorder="false" v-model="options.clientId" placeholder="请输入clientId"></uni-easyinput>
					</uni-forms-item>
					<uni-forms-item label="心跳(s)">
						<uni-easyinput :inputBorder="false" v-model="options.keepalive" placeholder="请输入心跳时间"></uni-easyinput>
					</uni-forms-item>
					
				</uni-forms>
			</uni-collapse-item>
		</uni-collapse>
		
		<button type="warn" @click="connect">MQTT 连接</button>
		<view>收到的回传消息:</view>
		<view class="text-box" scroll-y="true">
			<text>{{"主题："+ reciveTopic.toString() +"内容："+ receiveMessage.toString() }}</text>
		</view>
		<uni-forms border>
			<uni-forms-item label="主题">
				<uni-easyinput :inputBorder="false" v-model="onTopic" placeholder="请输入主题"></uni-easyinput>
			</uni-forms-item>
		</uni-forms>
		<button type="primary" @click="subscribe">主题订阅</button>
		<uni-forms border>
			<uni-forms-item label="主题">
				<uni-easyinput :inputBorder="false" v-model="sendOnTopic" placeholder="请输入主题"></uni-easyinput>
			</uni-forms-item>
			<uni-forms-item label="发送消息">
				<uni-easyinput :inputBorder="false" v-model="sendMassage" placeholder="请输入消息"></uni-easyinput>
			</uni-forms-item>
		</uni-forms>
		<button type="primary"  @click="publish">消息发布</button>
		<uni-forms border>
			<uni-forms-item label="主题">
				<uni-easyinput :inputBorder="false" v-model="deleteTopic" placeholder="请输入主题"></uni-easyinput>
			</uni-forms-item>
		</uni-forms>
		<button type="primary" @click="unsubscribe">取消订阅</button>
		<button type="primary" @click="unconnect">断开连接</button>
		<br/>
	</view>
</template>

<script>
	//import mqtt from '../../utils/mqtt.js';//二选一
	import mqtt from '../../utils/mqtt.min.js';
	import {SET_CLIENT,SET_RECEIVEMESSAGE,SET_RECIVETOPIC} from '../../store/mutation-type.js'
	
	export default {
		data() {
			return {
				serve: {
					host: 'aaa.aaa.aaa',
					wsport: '8083',
					wssport:'443',
					path: '/mqtt',
				},
				onTopic: 'hello',    //订阅
				sendOnTopic:'hello', //发送主题
				reciveTopic:'', //回传主题
				deleteTopic:'hello',//取消订阅
				Qos: 1,
				sendMassage: 'Hello EMQ-X！',
				time:0,
				receiveMessage: '',
				client: null,
				//MQTT连接的配置
				options: {
					wsOptions: {},
					protocolVersion: 4, //MQTT连接协议版本
					clientId: 'esp121213465',
					keepalive: 10,
					clean: false,
					username: 'aaaa',
					password: 'aaaa',
					reconnectPeriod: 1000, //1000毫秒，两次重新连接之间的间隔
					connectTimeout: 30 * 1000, //1000毫秒，两次重新连接之间的间隔
					resubscribe: true //如果连接断开并重新连接，则会再次自动订阅已订阅的主题（默认true）
				},
			};
		},
		methods: {
			
			connect: function() {
				var hosts = '',
				// #ifdef H5
					hosts = 'ws://' + this.serve.host + ':' + this.serve.wsport + this.serve.path
					//hosts = 'tpc://' + this.serve.host + ':1883'
				//#endif
				// #ifdef MP-WEIXIN
				hosts = 'wxs://' + this.serve.host +':' + this.serve.wssport + this.serve.path
				//#endif
				// #ifdef APP-PLUS
				hosts = 'wx://' + this.serve.host + ':' + this.serve.wsport + this.serve.path
				//#endif
				if (this.client == null || this.client.connented == false) {
					uni.showLoading({
						title: '连接中···'
					})
					//console.log(hosts, this.options)
					this.client = mqtt.connect(
						hosts,
						this.options
					);
					this.$store.commit(SET_CLIENT,this.client)
					this.client.on('connect', () => {
						uni.hideLoading();
						this.showToast('连接成功', 1000, 'success')
					});
					this.client.on('message', (topic, message) => {
						console.log('收到来自' + topic + '的消息' + message.toString());
						
						this.receiveMessage = message
						this.$store.commit(SET_RECEIVEMESSAGE,message)
						this.$store.commit(SET_RECIVETOPIC,topic)
						this.reciveTopic = topic

					});
				}

				this.client.on('reconnect', error => {
					uni.hideLoading();
					this.showToast('正在重连···', 1000)

				});
				this.client.on('error', error => {
					uni.hideLoading();
					this.showToast('连接失败!', 1000)
				});

			},
			subscribe: function() {
				// 判断是否已成功连接
				if (!this.client || !this.client.connected) {
					this.showToast('客户端未连接', 1000)
					return;
				}

				this.client.subscribe(this.onTopic, {
					qos: this.Qos
				}, error => {
					if (!error) {
						this.showToast('订阅成功', 1000, 'success')
						console.log('订阅成功');
					}
				});

				/* //订阅多个主题
			this.client.subscribe(['one', 'two', 'three'], { qos: 1 }, err => {
				console.log(err || '订阅成功');
				this.show(err || '订阅成功');
			 });
			
				    // 订阅不同 qos 的不同主题
				    this.client.subscribe(
				        [
				            { hello: 1 },
				            { 'one/two/three': 2 },
				            { '#': 0 }
				        ],
				        (err) => {
				          this.show();console.log(err || '订阅成功')
				        },
				    )
		
		
			}); */
			},
			publish: function() {
				// 判断是否已成功连接
				if (!this.client || !this.client.connected) {
					this.showToast('客户端未连接', 1000)
					return;
				}
				if (this.sendMassage != '') {
					this.client.publish(this.sendOnTopic,this.sendMassage, error => {
						console.log(error || '消息发布成功');
						this.showToast('消息发布成功', 1000, 'success')
					});
				} else {
					this.showToast('发布消息为空', 1000)
				}

			},
			unsubscribe: function() {
				this.client.unsubscribe(
					// topic, topic Array, topic Array-Onject
					// ['one', 'two', 'three'],
					this.onTopic,
					err => {
						console.log(err || '取消订阅成功');
						this.showToast('取消订阅成功', 1000, 'success')
					}
				);
			},
			unconnect: function() {
				if (!this.client || !this.client.connected) {
					this.showToast('客户端未连接', 1000)
					return;
				}
				this.client.end();
				this.client = null
				this.showToast('成功断开连接', 1000, 'success')
				console.log('断开连接');
			},
			showToast: function(title, time, icon = 'none') {
				uni.showToast({
					title: title,
					icon: icon,
				});
				setTimeout(function() {
					uni.hideToast();
				}, time);
			},
		},
	}
</script>
<style>
	button {
		margin-top: 30upx;
		margin-bottom: 30upx;
	}
</style>
